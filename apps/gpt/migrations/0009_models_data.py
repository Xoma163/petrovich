# Generated by Django 5.1.6 on 2025-05-09 23:16

from django.db import migrations


def add_models(apps, schema_editor):
    Provider = apps.get_model('gpt', 'Provider')
    CompletionModel = apps.get_model('gpt', 'CompletionModel')
    VisionModel = apps.get_model('gpt', 'VisionModel')
    ImageDrawModel = apps.get_model('gpt', 'ImageDrawModel')
    VoiceRecognitionModel = apps.get_model('gpt', 'VoiceRecognitionModel')

    provider, created = Provider.objects.get_or_create(name="grok")

    # GROK
    models_to_create = [
        CompletionModel(name="grok-3", verbose_name="grok-3", prompt_1m_token_cost=3, completion_1m_token_cost=15,
                        provider=provider, is_default=True),
        CompletionModel(name="grok-3-fast", verbose_name="grok-3 fast", prompt_1m_token_cost=5,
                        completion_1m_token_cost=25, provider=provider),
        CompletionModel(name="grok-3-mini", verbose_name="grok-3 mini", prompt_1m_token_cost=0.3,
                        completion_1m_token_cost=0.5, provider=provider),
        CompletionModel(name="grok-3-mini-fast", verbose_name="grok-3 mini fast", prompt_1m_token_cost=0.6,
                        completion_1m_token_cost=4, provider=provider),
        CompletionModel(name="grok-2", verbose_name="grok-2", prompt_1m_token_cost=2, completion_1m_token_cost=10,
                        provider=provider)
    ]
    CompletionModel.objects.bulk_create(models_to_create, ignore_conflicts=True)
    VisionModel(name="grok-2-vision", verbose_name="grok-2 vision", prompt_1m_token_cost=2, completion_1m_token_cost=10,
                is_default=True, provider=provider).save()
    ImageDrawModel(name="grok-2-image", verbose_name="grok-2 image", image_cost=0.07, width=1024, height=768,
                   is_default=True, provider=provider).save()

    # CLAUDE
    provider, _ = Provider.objects.get_or_create(name="claude")

    models_to_create = [
        CompletionModel(name="claude-3-7-sonnet-latest", verbose_name="3.7 Sonnet", prompt_1m_token_cost=3,
                        completion_1m_token_cost=15, provider=provider),
        CompletionModel(name="claude-3-5-sonnet-latest", verbose_name="3.5 Sonnet v2", prompt_1m_token_cost=3,
                        completion_1m_token_cost=15, provider=provider, is_default=True),
        CompletionModel(name="claude-3-5-haiku-latest", verbose_name="3.5 Haiku", prompt_1m_token_cost=0.8,
                        completion_1m_token_cost=4, provider=provider),
        CompletionModel(name="claude-3-opus-latest", verbose_name="3 Opus", prompt_1m_token_cost=15,
                        completion_1m_token_cost=75, provider=provider),
        CompletionModel(name="claude-3-haiku-latest", verbose_name="3 Haiku", prompt_1m_token_cost=0.25,
                        completion_1m_token_cost=1.25, provider=provider),
    ]
    CompletionModel.objects.bulk_create(models_to_create, ignore_conflicts=True)

    models_to_create = [
        VisionModel(name="claude-3-7-sonnet-latest", verbose_name="3.7 Sonnet", prompt_1m_token_cost=3,
                    completion_1m_token_cost=15, provider=provider),
        VisionModel(name="claude-3-5-sonnet-latest", verbose_name="3.5 Sonnet v2", prompt_1m_token_cost=3,
                    completion_1m_token_cost=15, provider=provider, is_default=True),
        VisionModel(name="claude-3-5-haiku-latest", verbose_name="3.5 Haiku", prompt_1m_token_cost=0.8,
                    completion_1m_token_cost=4, provider=provider),
        VisionModel(name="claude-3-opus-latest", verbose_name="3 Opus", prompt_1m_token_cost=15,
                    completion_1m_token_cost=75, provider=provider),
        VisionModel(name="claude-3-haiku-latest", verbose_name="3 Haiku", prompt_1m_token_cost=0.25,
                    completion_1m_token_cost=1.25, provider=provider),
    ]
    VisionModel.objects.bulk_create(models_to_create, ignore_conflicts=True)

    # CHATGPT

    provider, _ = Provider.objects.get_or_create(name="chatgpt")
    models_to_create = [
        CompletionModel(name="o1", verbose_name="o1", prompt_1m_token_cost=15, completion_1m_token_cost=60,
                        provider=provider),
        CompletionModel(name="o1-pro", verbose_name="o1 pro", prompt_1m_token_cost=150, completion_1m_token_cost=600,
                        provider=provider),
        CompletionModel(name="o1-mini", verbose_name="o1 mini", prompt_1m_token_cost=1.1, completion_1m_token_cost=4.4,
                        provider=provider),
        CompletionModel(name="o3", verbose_name="o3", prompt_1m_token_cost=10, completion_1m_token_cost=40,
                        provider=provider),
        CompletionModel(name="o3-mini", verbose_name="o3 mini", prompt_1m_token_cost=1.1, completion_1m_token_cost=4.4,
                        provider=provider),
        CompletionModel(name="o4-mini", verbose_name="o4 mini", prompt_1m_token_cost=1.1, completion_1m_token_cost=4.4,
                        provider=provider, is_default=True),
        CompletionModel(name="gpt-4.1", verbose_name="GPT-4.1", prompt_1m_token_cost=2, completion_1m_token_cost=8,
                        provider=provider),
        CompletionModel(name="gpt-4.1-mini", verbose_name="GPT-4.1 MINI", prompt_1m_token_cost=0.4,
                        completion_1m_token_cost=1.6, provider=provider),
        CompletionModel(name="gpt-4.1-nano", verbose_name="GPT-4.1 NANO", prompt_1m_token_cost=0.1,
                        completion_1m_token_cost=0.4, provider=provider),
        CompletionModel(name="gpt-4o", verbose_name="GPT-4o", prompt_1m_token_cost=2.5, completion_1m_token_cost=10,
                        provider=provider),
        CompletionModel(name="gpt-4o-mini", verbose_name="GPT-4o MINI", prompt_1m_token_cost=0.15,
                        completion_1m_token_cost=0.6, provider=provider),
        CompletionModel(name="gpt-4", verbose_name="GPT-4", prompt_1m_token_cost=30, completion_1m_token_cost=60,
                        provider=provider),
        CompletionModel(name="gpt-4-turbo", verbose_name="GPT-4 TURBO", prompt_1m_token_cost=10,
                        completion_1m_token_cost=30, provider=provider),
        CompletionModel(name="gpt-4-32k", verbose_name="GPT-4 32K", prompt_1m_token_cost=60,
                        completion_1m_token_cost=120, provider=provider),
        CompletionModel(name="gpt-4.5-preview", verbose_name="GPT-4.5", prompt_1m_token_cost=75,
                        completion_1m_token_cost=150, provider=provider),
        CompletionModel(name="gpt-3.5-turbo-0125", verbose_name="GPT-3.5 TURBO 0125", prompt_1m_token_cost=0.5,
                        completion_1m_token_cost=1.5, provider=provider),
        CompletionModel(name="gpt-3.5-turbo-1106", verbose_name="GPT-3.5 TURBO 1106", prompt_1m_token_cost=1,
                        completion_1m_token_cost=2, provider=provider),
        CompletionModel(name="gpt-3.5-turbo-0613", verbose_name="GPT-3.5 TURBO 0613", prompt_1m_token_cost=1.5,
                        completion_1m_token_cost=2, provider=provider),
        CompletionModel(name="gpt-3.5-turbo-16k-0613", verbose_name="GPT-3.5 TURBO 16K 0613", prompt_1m_token_cost=3,
                        completion_1m_token_cost=4, provider=provider),
        CompletionModel(name="gpt-3.5-turbo-0301", verbose_name="GPT-3.5 TURBO 16K 0613", prompt_1m_token_cost=1.5,
                        completion_1m_token_cost=2, provider=provider),
    ]
    CompletionModel.objects.bulk_create(models_to_create, ignore_conflicts=True)

    models_to_create = [
        VisionModel(name="o1", verbose_name="o1", prompt_1m_token_cost=15, completion_1m_token_cost=60,
                    provider=provider),
        VisionModel(name="o1-pro", verbose_name="o1 pro", prompt_1m_token_cost=150, completion_1m_token_cost=600,
                    provider=provider),
        VisionModel(name="o3", verbose_name="o3", prompt_1m_token_cost=10, completion_1m_token_cost=40,
                    provider=provider),
        VisionModel(name="o4-mini", verbose_name="o4 mini", prompt_1m_token_cost=1.1, completion_1m_token_cost=4.4,
                    provider=provider, is_default=True),
        VisionModel(name="gpt-4.1", verbose_name="GPT-4.1", prompt_1m_token_cost=2, completion_1m_token_cost=8,
                    provider=provider),
        VisionModel(name="gpt-4.1-mini", verbose_name="GPT-4.1 MINI", prompt_1m_token_cost=0.4,
                    completion_1m_token_cost=1.6, provider=provider),
        VisionModel(name="gpt-4.1-nano", verbose_name="GPT-4.1 NANO", prompt_1m_token_cost=0.1,
                    completion_1m_token_cost=0.4, provider=provider),
        VisionModel(name="gpt-4o", verbose_name="GPT-4o", prompt_1m_token_cost=2.5, completion_1m_token_cost=10,
                    provider=provider),
        VisionModel(name="gpt-4o-mini", verbose_name="GPT-4o MINI", prompt_1m_token_cost=0.15,
                    completion_1m_token_cost=0.6, provider=provider),
        VisionModel(name="gpt-4.5-preview", verbose_name="GPT-4.5", prompt_1m_token_cost=75,
                    completion_1m_token_cost=150, provider=provider),
    ]
    VisionModel.objects.bulk_create(models_to_create, ignore_conflicts=True)

    models_to_create = [
        ImageDrawModel(name="dall-e-3", verbose_name="DALLE 3", image_cost=0.040, width=1024, height=1024,
                       quality='standard', provider=provider),
        ImageDrawModel(name="dall-e-3", verbose_name="DALLE 3", image_cost=0.080, width=1024, height=1792,
                       quality='standard', provider=provider),
        ImageDrawModel(name="dall-e-3", verbose_name="DALLE 3", image_cost=0.080, width=1792, height=1024,
                       quality='standard', provider=provider),
        ImageDrawModel(name="dall-e-3", verbose_name="DALLE 3", image_cost=0.080, width=1024, height=1024, quality='hd',
                       provider=provider),
        ImageDrawModel(name="dall-e-3", verbose_name="DALLE 3", image_cost=0.120, width=1024, height=1792, quality='hd',
                       provider=provider),
        ImageDrawModel(name="dall-e-3", verbose_name="DALLE 3", image_cost=0.120, width=1792, height=1024, quality='hd',
                       provider=provider, is_default=True),
        ImageDrawModel(name="gpt-image-1", verbose_name="gpt-image-1", image_cost=0.011, width=1024, height=1024,
                       quality="low", provider=provider),
        ImageDrawModel(name="gpt-image-1", verbose_name="gpt-image-1", image_cost=0.016, width=1024, height=1536,
                       quality="low", provider=provider),
        ImageDrawModel(name="gpt-image-1", verbose_name="gpt-image-1", image_cost=0.016, width=1536, height=1024,
                       quality="low", provider=provider),
        ImageDrawModel(name="gpt-image-1", verbose_name="gpt-image-1", image_cost=0.042, width=1024, height=1024,
                       quality="medium", provider=provider),
        ImageDrawModel(name="gpt-image-1", verbose_name="gpt-image-1", image_cost=0.063, width=1024, height=1536,
                       quality="medium", provider=provider),
        ImageDrawModel(name="gpt-image-1", verbose_name="gpt-image-1", image_cost=0.063, width=1536, height=1024,
                       quality="medium", provider=provider),
        ImageDrawModel(name="gpt-image-1", verbose_name="gpt-image-1", image_cost=0.167, width=1024, height=1024,
                       quality="high", provider=provider),
        ImageDrawModel(name="gpt-image-1", verbose_name="gpt-image-1", image_cost=0.250, width=1024, height=1536,
                       quality="high", provider=provider),
        ImageDrawModel(name="gpt-image-1", verbose_name="gpt-image-1", image_cost=0.250, width=1536, height=1024,
                       quality="high", provider=provider),
    ]
    ImageDrawModel.objects.bulk_create(models_to_create, ignore_conflicts=True)

    VoiceRecognitionModel(
        name="whisper-1", verbose_name="whisper-1", voice_recognition_1_min_cost=0.006, provider=provider,
        is_default=True
    ).save()


def reverse_models(apps, schema_editor):
    Provider = apps.get_model('gpt', 'Provider')
    CompletionModel = apps.get_model('gpt', 'CompletionModel')
    VisionModel = apps.get_model('gpt', 'VisionModel')
    ImageDrawModel = apps.get_model('gpt', 'ImageDrawModel')
    VoiceRecognitionModel = apps.get_model('gpt', 'VoiceRecognitionModel')

    try:
        provider = Provider.objects.get(name="grok")
        CompletionModel.objects.filter(provider=provider).delete()
        VisionModel.objects.filter(provider=provider).delete()
        ImageDrawModel.objects.filter(provider=provider).delete()
    except Provider.DoesNotExist:
        pass

    try:
        provider = Provider.objects.get(name="claude")
        CompletionModel.objects.filter(provider=provider).delete()
        VisionModel.objects.filter(provider=provider).delete()
    except Provider.DoesNotExist:
        pass

    try:
        provider = Provider.objects.get(name="chatgpt")
        CompletionModel.objects.filter(provider=provider).delete()
        VisionModel.objects.filter(provider=provider).delete()
        ImageDrawModel.objects.filter(provider=provider).delete()
        VoiceRecognitionModel.objects.filter(provider=provider).delete()
    except Provider.DoesNotExist:
        pass


class Migration(migrations.Migration):
    dependencies = [
        ('gpt', '0008_alter_completionmodel_name_alter_imagedrawmodel_name_and_more'),
    ]

    operations = [
        migrations.RunPython(add_models, reverse_models),
    ]
